;;just basic customization
(tool-bar-mode -1)
(scroll-bar-mode -1)
(menu-bar-mode -1)

;; change font
(set-frame-font "Inconsolata 14" nil t)

;; make line numbers and also make them relative
(global-display-line-numbers-mode 1)
(setq display-line-numbers 'relative)

;; Set up package.el to work with MELPA
(require 'package)
(add-to-list 'package-archives
             '("melpa" . "https://melpa.org/packages/"))
(package-refresh-contents)

;; Download Evil
(unless (package-installed-p 'evil)
  (package-install 'evil))

;; Enable Evil
(require 'evil)
(evil-mode 1)
(custom-set-variables
 ;; custom-set-variables was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 '(custom-enabled-themes '(gruber-darker))
 '(custom-safe-themes
   '("ba4ab079778624e2eadbdc5d9345e6ada531dc3febeb24d257e6d31d5ed02577" default))
 '(package-selected-packages
   '(smartparens yasnippet ws-butler dtrt-indent clean-aindent-mode stickyfunc-enhance treemacs gruber-darker-theme ggtags evil company)))

(require 'cc-mode)
(require 'company-c-headers)
;; activate company (complete anything shortcut)
(require 'company)
(add-hook 'after-init-hook 'global-company-mode)

;; make company-mode work with clangd
(setq company-backends (delete 'company-semantic company-backends))
(define-key c-mode-map  [(tab)] 'company-complete)
(define-key c++-mode-map  [(tab)] 'company-complete)

;; complete headers
(add-to-list 'company-backends 'company-c-headers)
(add-to-list 'company-c-headers-path-system "/usr/include/c++/4.8/")

;; code completion
(require 'semantic)

(global-semanticdb-minor-mode 1)
(global-semantic-idle-scheduler-mode 1)

(semantic-mode 1)

;; displays function interface in the minibuffer
(global-semantic-idle-summary-mode 1)

;; this mode shows the function point is currently in at the first line of the current buffer
(add-to-list 'semantic-default-submodes 'global-semantic-stickyfunc-mode)

;; setup c style
(setq
 c-default-style "linux")

(global-set-key (kbd "RET") 'newline-and-indent)  ; automatically indent when press RET

;; activate whitespace-mode to view all whitespace characters
(global-set-key (kbd "C-c w") 'whitespace-mode)

;; show unncessary whitespace that can mess up your diff
(add-hook 'prog-mode-hook (lambda () (interactive) (setq show-trailing-whitespace 1)))

;; use space to indent by default
(setq-default indent-tabs-mode nil)

;; set appearance of a tab that is represented by 4 spaces
(setq-default tab-width 4)

;; Package: clean-aindent-mode
(require 'clean-aindent-mode)
(add-hook 'prog-mode-hook 'clean-aindent-mode)

;; Package: dtrt-indent
(require 'dtrt-indent)
(dtrt-indent-mode 1)

;; Package: ws-butler
(require 'ws-butler)
(add-hook 'c-mode-common-hook 'ws-butler-mode)

;; Package: yasnippet
(require 'yasnippet)
(yas-global-mode 1)

;; Package: smartparens
(require 'smartparens-config)
(show-smartparens-global-mode +1)
(smartparens-global-mode 1)

;; when you press RET, the curly braces automatically
;; add another newline
(sp-with-modes '(c-mode c++-mode)
  (sp-local-pair "{" nil :post-handlers '(("||\n[i]" "RET")))
  (sp-local-pair "/*" "*/" :post-handlers '((" | " "SPC")
                                            ("* ||\n[i]" "RET"))))
(custom-set-faces
 ;; custom-set-faces was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 )


;; Set the default compile command
(setq compile-command "gcc -Wall -o %e %f")

;; Define a function to compile and run C programs
(defun compile-and-run-c-program ()
  (interactive)
  (setq-local compile-command (format "gcc -Wall -o %s %s && ./%s"
                                      (file-name-sans-extension (buffer-name))
                                      (buffer-name)
                                      (file-name-sans-extension (buffer-name))))
  (compile compile-command))

;; Bind a key for compiling and running C programs
(global-set-key (kbd "C-c C-r") 'compile-and-run-c-program)
